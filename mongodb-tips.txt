
mongo "mongodb+srv://sandbox-qdmgo.mongodb.net/test"  --username m001-student

mongo "mongodb+srv://sandbox-qdmgo.mongodb.net/test"  --username m001-student --password m001-mongodb-basics

Create a user with the following credentials:

username: m001-student

password: m001-mongodb-basics

-----------------------------------------

mongo cluster admin

Launch mongod with specified --dbpath and --logpath:

mongod --dbpath /data/db --logpath /data/log/mongod.log

Launch mongod and fork the process:

mongod --dbpath /data/db --logpath /data/log/mongod.log --fork

Launch mongod with many configuration options:

mongod --dbpath /data/db --logpath /data/log/mongod.log --fork --replSet "M103" --keyFile /data/keyfile --bind_ip "127.0.0.1,192.168.103.100" --sslMode requireSSL --sslCAFile "/etc/ssl/SSLCA.pem" --sslPEMKeyFile "/etc/ssl/ssl.pem"

mongod --port 30000 --dbpath first_mongod --logpath first_mongod/mongod.log --fork

lab1

mongod --port 27000 --dbpath /data/db/ --logpath /var/log/mongodb/mongod.log --bind_ip "127.0.0.1,192.168.103.100" --auth --fork

By default, a mongod that enforces authentication but has no configured users only allows connections through the localhost. Use the mongo shell on the Vagrant box to use the localhost exception and connect to this node.

Use the following command to connect to the Mongo shell and create the following user. You will need this user in order to validate subsequent labs.

mongo admin --host localhost:27000 --eval '
  db.createUser({
    user: "m103-admin",
    pwd: "m103-pass",
    roles: [
      {role: "root", db: "admin"}
    ]
  })
'

The above command creates a user with the following credentials:

Role: root on admin database
Username: m103-admin
Password: m103-pass

List --dbpath directory:

ls -l /data/db
 
List diagnostics data directory:

ls -l /data/db/diagnostic.data
 
List journal directory:

ls -l /data/db/journal
 
List socket file:

ls /tmp/mongodb-27017.sock

Now that your config file has changed, you have to restart mongod so the server will reflect those changes. 
As a reminder, here is the way to safely shutdown from the mongo shell:

use admin
db.shutdownServer()
quit()

User management commands:

db.createUser()
db.dropUser()
 
Collection management commands:

db.<collection>.renameCollection()
db.<collection>.createIndex()
db.<collection>.drop()
 
Database management commands:

db.dropDatabase()
db.createCollection()
 
Database status command:

db.serverStatus()

Creating index with Database Command:

db.runCommand(
  { "createIndexes": <collection> },
  { "indexes": [
    {
      "key": { "product": 1 }
    },
    { "name": "name_index" }
    ]
  }
)

Creating index with Shell Helper:

db.<collection>.createIndex(
  { "product": 1 },
  { "name": "name_index" }
)

Introspect a Shell Helper:

db.<collection>.createIndex

lab create user diferent role:

mongo admin --host localhost:27000 --username m103-admin --password m103-pass

mongo admin --host localhost:27000 --eval '
  db.createUser({
    user: "m103-application-user",
    pwd: "m103-application-pass",
    roles: [
      {role: "readWrite", db: "applicationData"}
    ]
  })
'

lab import dataset:

mongoimport --db applicationData --collection products --file /dataset/products.json --username m103-application-user --password m103-application-pass --host localhost:27000 --authenticationDatabase admin
